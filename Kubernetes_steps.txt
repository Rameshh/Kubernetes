* Kubernetes or K8s
Container + Orchestration
* Kubectl installation steps
1. curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
2. chmod +x ./kubectl
3. sudo mv ./kubectl /usr/local/bin/kubectl
4. kubectl version

* Minikube installation steps
1. Apply all updates of existing packages of your system by executing the following apt commands,
   sudo apt update -y
   sudo apt upgrade -y
2. Install Minikube dependencies
   sudo apt install -y curl wget apt-transport-https
3. Download Minikube Binary
   wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
   
   Once the binary is downloaded, copy it to the path /usr/local/bin and set the executable permissions on it
   sudo cp minikube-linux-amd64 /usr/local/bin/minikube
   sudo chmod +x /usr/local/bin/minikube
  
   Verify the minikube version
   minikube version
   
   Add your user to the 'docker' group
   sudo usermod -aG docker $USER && newgrp docker
   
4. Start, status, stop and delete minikube
   minikube start
   minikube status
   minikube stop
   minikube delete
   
   Run following kubectl command to verify the Kubernetes version, node status and cluster info.
   kubectl cluster-info
   kubectl get nodes

5. Verify Minikube Installation
   Run below kubectl command to install nginx based deployment.
   kubectl create deployment my-nginx --image=nginx

   Run following kubectl command to verify deployment status
   kubectl get deployments.apps my-nginx
   kubectl get pods
   
* kubectl commands
  kubectl cluster-info
  kubectl get pods
  kubectl get nodes
  kubectl run redis --image=redis123
  kudectl edit pod redis
  kubectl run redis --image=redis123 --dry-run=client -o yaml > pod.yaml
  kubectl delete pod <podname>
  kubectl create -f replicaset-definition.yaml
  kubectl describe replicaset
  kubectl delete replicaset replicaset-1
  
* Create a replicaset-definition.yaml file
  vim replicaset-definition.yaml
  kubectl create -f replicaset-definition.yaml
  kubectl get replicaste
  kubectl get pods
  
* Create a service-definition.yaml file
  vim service-definition.yaml
  kubectl create -f service-definition.yaml
  kubectl get service
  minikube service frontend --url
  Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379
  kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
  Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
  kubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml

* Namespaces
  kubectl get pods --namespace=kube-system
  kubectl get namespaces
  kubectl get pods --namespace=research
  kubectl run redis --image=redis -n finance
  kubectl get pods --all-namespaces
  kubectl -n dev get svc (Database checking)

* Imperative vs Declarative
  kubectl run nginx --image=nginx
  Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
  kubectl run nginx --image=nginx --dry-run=client -o yaml
  Create a deployment
  kubectl create deployment --image=nginx nginx
  Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
  kubectl create deployment --image=nginx nginx --dry-run=client -o yaml
  Generate Deployment with 4 Replicas
  kubectl create deployment nginx --image=nginx --replicas=4
  You can also scale a deployment using the kubectl scale command.
  kubectl scale deployment nginx --replicas=4
  Another way to do this is to save the YAML definition to a file and modify
  kubectl create deployment nginx --image=nginx --dry-run=client -o yaml > nginx-deployment.yaml
  
