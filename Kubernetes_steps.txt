* Kubernetes or K8s
Container + Orchestration
* Kubectl installation steps
1. curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
2. chmod +x ./kubectl
3. sudo mv ./kubectl /usr/local/bin/kubectl
4. kubectl version

* Minikube installation steps
1. Apply all updates of existing packages of your system by executing the following apt commands,
   sudo apt update -y
   sudo apt upgrade -y
2. Install Minikube dependencies
   sudo apt install -y curl wget apt-transport-https
3. Download Minikube Binary
   wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
   
   Once the binary is downloaded, copy it to the path /usr/local/bin and set the executable permissions on it
   sudo cp minikube-linux-amd64 /usr/local/bin/minikube
   sudo chmod +x /usr/local/bin/minikube
  
   Verify the minikube version
   minikube version
   
   Add your user to the 'docker' group
   sudo usermod -aG docker $USER && newgrp docker
   
4. Start, status, stop and delete minikube
   minikube start
   minikube status
   minikube stop
   minikube delete
   
   Run following kubectl command to verify the Kubernetes version, node status and cluster info.
   kubectl cluster-info
   kubectl get nodes

5. Verify Minikube Installation
   Run below kubectl command to install nginx based deployment.
   kubectl create deployment my-nginx --image=nginx

   Run following kubectl command to verify deployment status
   kubectl get deployments.apps my-nginx
   kubectl get pods
   
* kubectl commands
  kubectl cluster-info
  kubectl get pods
  kubectl get nodes
  kubectl run redis --image=redis123
  kudectl edit pod redis
  kubectl run redis --image=redis123 --dry-run=client -o yaml > pod.yaml
  kubectl delete pod <podname>
  kubectl create -f replicaset-definition.yaml
  kubectl describe replicaset
  kubectl delete replicaset replicaset-1
  
* Create a replicaset-definition.yaml file
  vim replicaset-definition.yaml
  kubectl create -f replicaset-definition.yaml
  kubectl get replicaste
  kubectl get pods
  
* Create a service-definition.yaml file
  vim service-definition.yaml
  kubectl create -f service-definition.yaml
  kubectl get service
  minikube service frontend --url
  Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379
  kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
  Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:
  kubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml

* Namespaces
  kubectl get pods --namespace=kube-system
  kubectl get namespaces
  kubectl get pods --namespace=research
  kubectl run redis --image=redis -n finance
  kubectl get pods --all-namespaces
  kubectl -n dev get svc (Database checking)

* Imperative vs Declarative
  kubectl run nginx --image=nginx
  Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
  kubectl run nginx --image=nginx --dry-run=client -o yaml
  Create a deployment
  kubectl create deployment --image=nginx nginx
  Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
  kubectl create deployment --image=nginx nginx --dry-run=client -o yaml
  Generate Deployment with 4 Replicas
  kubectl create deployment nginx --image=nginx --replicas=4
  You can also scale a deployment using the kubectl scale command.
  kubectl scale deployment nginx --replicas=4
  Another way to do this is to save the YAML definition to a file and modify
  kubectl create deployment nginx --image=nginx --dry-run=client -o yaml > nginx-deployment.yaml
  
* Manual Scheduling
  In yam file need to specify as below to manual schedule.
  nodeName: node01(Provide the node name to schedule)
  kubectl create -f nginx.yaml
  kubectl replace --force -f nginx.yaml
  kubectl get pods --watch
  kubectl get pods -o wide
  
* Labels and selectors
  kubectl get pods --selector env=dev
  kubectl get pods --selector bu=finance
  kubectl get pods --selector bu=finance --no-headers | wc -l
  kubectl get pods --selector env=prod
  kubectl get all --selector env=prod --no-headers | wc -l
  kubectl get pods --selector env=prod,bu=finance,tier=frontend
  
* Taints and Tolerations
  Taints are nodes
  Tolerations are pods
  kubectl describe node node01
  kubectl describe node node01 | grep -i Taints
  Create a taint on node01 with key of spray, value of mortein and effect of NoSchedule.
  kubectl taint node node01 spray=mortein:NoSchedule
  Create a new pod with the nginx image and pod name as mosquito.
  kubectl run mosquito --image=nginx
  Create another pod named bee with the nginx image, which has a toleration set to the taint mortein.
  kubectl run bee --image=nginx --dry-run=client -o yaml
  kubectl run bee --image=nginx --dry-run=client -o yaml > bee.yaml
  Open the bee.yaml and paste below containt
  tolerations:
  - key: spray
    value: mortein
    effect: NoSchedule
    operator: Equal
  kubectl create -f bee.yaml
  Remove the taint on controlplane, which currently has the taint effect of NoSchedule.
  kubectl taint nodes controlplane node-role.kubernetes.io/master:NoSchedule-
  
* Node Selectors and Node Affinity
  kubectl label node node01 color=blue
  
* Daemon Sets
  kubectl get daemonsets
  kubectl get daemonsets -A
  kubectl get daemonsets --all-namespaces
  kubectl describe daemonset kube-flannel-ds --namespace=kube-system
  
* Static PODs
  kubectl get pods -A
  kubectl get pods --all-namespaces -o wide
  
* Monitoring Cluster Components
  kubectl top node
  kubectl top pods
  
* Managing Applications logs
  kubectl logs -f pod name
  
* Rolling Updates and Rollback
* Commands and Arguments
  command: ["sleep", "5"]
  
* Configuring and configmaps
  kubectl get configmaps
  Create a new ConfigMap for the webapp-color POD. Use the spec given below.
  kubectl create configmap webapp-config-map --from-literal=APP_COLOR=darkblue
  kubectl replace --force -f webapp-color.yaml
  
* Configure Secrets in Applications
  kubectl get secrets
  kubectl describe secrets
  kubectl create secret generic db-secret --from-literal=DB_Host=sql01 --from-literal=DB_User=root --from-literal=DB_Password=password123
  kubectl replace --force -f yaml file
  
* Multicontainer pods
  kubectl run yellow --image=busybox --dry-run=client -o yaml
  kubectl run yellow --image=busybox --dry-run=client -o yaml > yellow.yaml
  
* Init Containers
  Identify the pod that has an initContainer configured.
  kubectl describe pod
  
* Operating System Upgrade
  kubectl drain node01
  kubectl uncordon node01
  kubectl cordon node01
  
* Cluster upgrade process
  kubeadm upgrade plan
  kubeadm upgrade apply
  kubectl drain controlplane --ignore-daemonsets
  
  Upgrade the controlplane components to exact version v1.20.0, Upgrade kubeadm tool (if not already), then the master components, 
  and finally the kubelet.Practice referring to the kubernetes documentation page. Note: While upgrading kubelet, 
  if you hit dependency issue while running the apt-get upgrade kubelet command, use the apt install kubelet=1.20.0-00 command instead
  apt update
  apt install kubeadm=1.20.0-00
  kubeadm upgrade apply v1.20.0
  apt install kubelet=1.20.0-00
  systemctl restart kubelet
  
  kubectl uncordon controlplane
  kubectl drain node01 --ignore-daemonsets
  
* Backup and Restore Method
  kubectl get deploy
  
* View Certificate Details
  Identify the certificate file used for the kube-api server
  cat /etc/kubernetes/manifests/kube-apiserver.yaml
  
* TLS in kubernetes-certificate creation
  Generate key:
  openssl genrsa -out ca.key 2048
  Certificate Signing Request:
  openssl req -new -key ca.key -subj "/CN=KUBERNETES-CA" -out ca.csr
  Sign Certificate:
  openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt
  The same way we can create certificates for KUBE SCHEDULER, KUBE CONTROLLER MANAGER and KUBE PROXY.
  
* View Certificate Details
  kubectl get csr
  kubectl certificate approve name
  kubectl certificate deny name
  kubectl delete csr name
  
* API Groups
  curl https://kube-master:6443/version
  curl https://kube-master:6443/api/v1/pods
  kube proxy is not equal to kubectl proxy 

* Authorization
  why, mechanism, ABAC, RBAC and webhook
  ABAC: Attribute-base access control
  
* RBAC(Role Based Access Control)
  To view RBAC
  kubectl get roles
  kubectl get rolebindings
  kubectl describe role developer
  
  To Check Access
  kubectl auth can-i create deployments
  kubectl auth can-i delete nodes
  kubectl auth can-i create deployments --as dev-user
  kubectl auth can-i create pods --as dev-user
  
* Cluster Roles and Role Bindings
  kubectl get clusterroles --no-headers | wc -l
  kubectl get clusterrolesbindings --no-headers | wc -l
  kubectl describe clusterrole cluster-admin
  
* Service Accounts
  User: used by humans.
  Service: used by machines
  kubectl create serivceaccount dashboard-sa
  kubectl get serviceaccount
  
* Image Security
  image:docker.io/library/nginx
  
* 
